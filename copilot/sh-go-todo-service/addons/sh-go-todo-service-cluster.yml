Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  Name:
    Type: String
    Description: The name of the service, job, or workflow being deployed.
  # Customize your Aurora Serverless cluster by setting the default value of the following parameters.
  shgotodoserviceclusterDBName:
    Type: String
    Description: The name of the initial database to be created in the DB cluster.
    Default: go_todos
    # Cannot have special characters
    # Naming constraints: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints
  shgotodoserviceclusterDBAutoPauseSeconds:
    Type: Number
    Description: The duration in seconds before the cluster pauses.
    Default: 1000
Mappings:
  shgotodoserviceclusterEnvScalingConfigurationMap:
    develop:
      "DBMinCapacity": 1 # AllowedValues: [1, 2, 4, 8, 16, 32, 64, 128, 256]
      "DBMaxCapacity": 1 # AllowedValues: [1, 2, 4, 8, 16, 32, 64, 128, 256]
    All:
      "DBMinCapacity": 1 # AllowedValues: [1, 2, 4, 8, 16, 32, 64, 128, 256]
      "DBMaxCapacity": 1 # AllowedValues: [1, 2, 4, 8, 16, 32, 64, 128, 256]

Resources:
  shgotodoserviceclusterDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: Group of Copilot private subnets for Aurora cluster.
      SubnetIds:
        !Split [",", { "Fn::ImportValue": !Sub "${App}-${Env}-PrivateSubnets" }]
  shgotodoserviceclusterSecurityGroup:
    Metadata:
      "aws:copilot:description": "A security group for your workload to access the DB cluster shgotodoservicecluster"
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "The Security Group for ${Name} to access DB cluster shgotodoservicecluster."
      VpcId:
        Fn::ImportValue: !Sub "${App}-${Env}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "copilot-${App}-${Env}-${Name}-Aurora"
  shgotodoserviceclusterDBClusterSecurityGroup:
    Metadata:
      "aws:copilot:description": "A security group for your DB cluster shgotodoservicecluster"
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: The Security Group for the database cluster.
      SecurityGroupIngress:
        - ToPort: 3306
          FromPort: 3306
          IpProtocol: tcp
          Description: !Sub "From the Aurora Security Group of the workload ${Name}."
          SourceSecurityGroupId: !Ref shgotodoserviceclusterSecurityGroup
      VpcId:
        Fn::ImportValue: !Sub "${App}-${Env}-VpcId"
  shgotodoserviceclusterAuroraSecret:
    Metadata:
      "aws:copilot:description": "A Secrets Manager secret to store your DB credentials"
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub Aurora main user secret for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        IncludeSpace: false
        PasswordLength: 16
  shgotodoserviceclusterDBClusterParameterGroup:
    Metadata:
      "aws:copilot:description": "A DB parameter group for engine configuration values"
    Type: "AWS::RDS::DBClusterParameterGroup"
    Properties:
      Description: !Ref "AWS::StackName"
      Family: "aurora-mysql5.7"
      Parameters:
        character_set_client: "utf8"
  shgotodoserviceclusterDBCluster:
    Metadata:
      "aws:copilot:description": "The shgotodoservicecluster Aurora Serverless database cluster"
    Type: "AWS::RDS::DBCluster"
    Properties:
      MasterUsername:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref shgotodoserviceclusterAuroraSecret,
            ":SecretString:username}}",
          ],
        ]
      MasterUserPassword:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref shgotodoserviceclusterAuroraSecret,
            ":SecretString:password}}",
          ],
        ]
      DatabaseName: !Ref shgotodoserviceclusterDBName
      Engine: "aurora-mysql"
      EngineVersion: "5.7.mysql_aurora.2.07.1"
      EngineMode: serverless
      DBClusterParameterGroupName: !Ref shgotodoserviceclusterDBClusterParameterGroup
      DBSubnetGroupName: !Ref shgotodoserviceclusterDBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref shgotodoserviceclusterDBClusterSecurityGroup
      ScalingConfiguration:
        AutoPause: true
        # Replace "All" below with "!Ref Env" to set different autoscaling limits per environment.
        MinCapacity:
          !FindInMap [
            shgotodoserviceclusterEnvScalingConfigurationMap,
            All,
            DBMinCapacity,
          ]
        MaxCapacity:
          !FindInMap [
            shgotodoserviceclusterEnvScalingConfigurationMap,
            All,
            DBMaxCapacity,
          ]
        SecondsUntilAutoPause: !Ref shgotodoserviceclusterDBAutoPauseSeconds
  shgotodoserviceclusterSecretAuroraClusterAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref shgotodoserviceclusterAuroraSecret
      TargetId: !Ref shgotodoserviceclusterDBCluster
      TargetType: AWS::RDS::DBCluster
Outputs:
  shgotodoserviceclusterSecret: # injected as SHGOTODOSERVICECLUSTER_SECRET environment variable by Copilot.
    Description: "The JSON secret that holds the database username and password. Fields are 'host', 'port', 'dbname', 'username', 'password', 'dbClusterIdentifier' and 'engine'"
    Value: !Ref shgotodoserviceclusterAuroraSecret
  shgotodoserviceclusterSecurityGroup:
    Description: "The security group to attach to the workload."
    Value: !Ref shgotodoserviceclusterSecurityGroup
